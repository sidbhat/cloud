/** ****************************************************************************
 * [ NIKKISHI CONFIDENTIAL ]                                                  *
 *                                                                            *
 *    Copyright (c) 2011.  Nikkishi LLC                                       *
 *    All Rights Reserved.                                                    *
 *                                                                            *
 *   NOTICE:  All information contained herein is, and remains                *
 *   the property of Nikkishi LLC and its suppliers,                          *
 *   if any.  The intellectual and technical concepts contained               *
 *   herein are proprietary to Nikkishi LLC and its                           *
 *   suppliers and may be covered by U.S. and Foreign Patents,                *
 *   patents in process, and are protected by trade secret or copyright law.  *
 *   Dissemination of this information or reproduction of this material       *
 *   is strictly forbidden unless prior written permission is obtained        *
 *   from Nikkishi LLC.                                                       *
 ***************************************************************************** */

package com.oneapp.cloud.core.currency

import grails.plugin.multitenant.core.groovy.compiler.MultiTenant

@MultiTenant
public class Money implements Serializable {
    BigDecimal amount = 0
    Currency currency = Currency.getInstance('EUR')

    private static decimalFormat = new java.text.DecimalFormat("###,##0.00")

    static constraints = {
        amount(scale: 2)
    }

    /**
     * Receives a string which contains the amount and currency code,
     * separated by a space ('250.0 EUR'), and creates a new money instance
     * with those values.
     */
    static Money getInstance(String value) {
        def list = value.split(' ')
        assert list.size() == 2
        BigDecimal newAmount = new BigDecimal(list[0])
        def newCurrency = Currency.getInstance(list[1])
        Money money = new Money(amount: newAmount, currency: newCurrency)
        return money
    }


    int hashCode() {
        return amount.hashCode() + currency.hashCode()
    }

    String toString() {
        String formatted = decimalFormat.format((BigDecimal) amount)
        return "${formatted} ${currency?.currencyCode}"
    }


    boolean equals(Object other) {
        if (!other) return false;
        if (!(other instanceof Money)) return false;
        if (currency != other.currency) return false;
        if (amount != other.amount) return false;
        return true;
    }

    Money clone() {
        return new Money(amount: this.amount, currency: currency)
    }

    Money plus(Money other) {
        assert other
        if (other.currency != this.currency) {
            other = other.convertTo(this.currency)
        }
        return new Money(amount: this.amount + other.amount, currency: currency)
    }

    Money minus(Money other) {
        return plus(other * -1)
    }

    Money plus(Number n) {
        if (!n) n = 0
        return new Money(amount: this.amount + n, currency: currency)
    }

    Money minus(Number n) {
        if (!n) n = 0
        return new Money(amount: this.amount - n, currency: currency)
    }

    Money multiply(Number n) {
        if (!n) n = 0
        return new Money(amount: this.amount * n, currency: currency)
    }

    Money div(Number n) {
        return new Money(amount: this.amount / n, currency: currency)
    }

    Money convertTo(Currency newCurrency, Date toDate = null, ExchangeRate u_rate = null) {
        if (newCurrency == currency) return this;
        if (!toDate) toDate = new Date()
        def multiplier = 0

        def rate
        if (u_rate == null) {
            def c = ExchangeRate.createCriteria()
            rate = c.get {
                or {
                    and {
                        eq('baseCurrency', this.currency)
                        eq('toCurrency', newCurrency)
                    }
                    and {
                        eq('baseCurrency', newCurrency)
                        eq('toCurrency', this.currency)
                    }
                }
                le('date', toDate)
                order('date', 'desc')
                maxResults(1)
            }
        }
        else
            rate = u_rate   // use user specified exchange rate

        if (!rate) {
            throw new IllegalArgumentException("No exchange rate found")
        }
        else {
            if (rate.baseCurrency == this.currency) multiplier = rate.rate
            else multiplier = 1 / rate.rate
        }
        return new Money(amount: amount * multiplier, currency: newCurrency)
    }
}
