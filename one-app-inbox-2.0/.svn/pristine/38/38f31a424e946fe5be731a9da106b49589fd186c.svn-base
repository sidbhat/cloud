/******************************************************************************
 * [ NIKKISHI CONFIDENTIAL ]                                                  *
 *                                                                            *
 *    Copyright (c) 2011.  Nikkishi LLC                                       *
 *    All Rights Reserved.                                                    *
 *                                                                            *
 *   NOTICE:  All information contained herein is, and remains                *
 *   the property of Nikkishi LLC and its suppliers,                          *
 *   if any.  The intellectual and technical concepts contained               *
 *   herein are proprietary to Nikkishi LLC and its                           *
 *   suppliers and may be covered by U.S. and Foreign Patents,                *
 *   patents in process, and are protected by trade secret or copyright law.  *
 *   Dissemination of this information or reproduction of this material       *
 *   is strictly forbidden unless prior written permission is obtained        *
 *   from Nikkishi LLC.                                                       *
 ******************************************************************************/
import org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy
import org.springframework.security.web.session.ConcurrentSessionFilter
import org.springframework.security.core.session.SessionRegistryImpl
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy

// Place your Spring DSL code here
beans = {

    customPropertyEditorRegistrar(CustomDateEditorRegistrar)
    //myLogoutHandler(LogoutHandler)
    //securityEventListener(SpringSecurityEventListener)
	hibernateStringEncryptor(org.jasypt.hibernate.encryptor.HibernatePBEStringEncryptor) {
		registeredName = "gormEncryptor"
		algorithm = "PBEWithMD5AndTripleDES"
		password = "s3kr1t"
		keyObtentionIterations = 1000
	}
	
	sessionRegistry(SessionRegistryImpl)
	
			sessionAuthenticationStrategy(ConcurrentSessionControlStrategy, sessionRegistry) {
					maximumSessions = -1
			}
	
			concurrentSessionFilter(ConcurrentSessionFilter){
					sessionRegistry = sessionRegistry
					expiredUrl = '/login/concurrentSession'
			}

}
