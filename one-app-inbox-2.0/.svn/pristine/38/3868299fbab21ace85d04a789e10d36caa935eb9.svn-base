package org.grails.formbuilder.widget

import java.text.SimpleDateFormat;

import grails.converters.JSON;

import org.codehaus.groovy.grails.commons.ConfigurationHolder;
import org.grails.formbuilder.Field;
import org.grails.formbuilder.Form;
import org.grails.formbuilder.FormDesignerView
import org.grails.formbuilder.FormBuilderConstants
import javax.sql.DataSource
import groovy.sql.Sql

/**
 *
 * @author <a href='mailto:admin@oneappcloud.com'>Nikkishi</a>
 *
 * @since 0.1
 */
class SubForm extends Widget {
	
	def _url      = ConfigurationHolder.config.dataSource.url
	def _username = ConfigurationHolder.config.dataSource.username
	def _password = ConfigurationHolder.config.dataSource.password
	def _driver   = ConfigurationHolder.config.dataSource.driverClassName
	
	String getFieldStyles(Object settings, Locale locale) {
		String language = locale.language == 'en' ? 'en' : "${locale.language}_${locale.country}"
		String display = settings.hideFromUser && !isRoleGranted?'display:none; ':''
		String fontFamily = settings."${language}".styles.fontFamily == 'default' ? FormBuilderConstants.EMPTY_STRING : "font-family: ${settings."${language}".styles.fontFamily}; "
		String labelColor = settings.styles.label.color == 'default' ? FormBuilderConstants.EMPTY_STRING : "color: #${settings.styles.label.color}; "
		String labelBackgroundColor = settings.styles.label.backgroundColor == 'default' ? FormBuilderConstants.EMPTY_STRING : "background-color: #${settings.styles.label.backgroundColor}; "
		return "${fontFamily}${labelColor}${labelBackgroundColor}${display}"
	}
 
	String getWidgetTemplateText(String name, Object settings, Locale locale, FormDesignerView formDesignerView, Object domainInstance) {
		return widgetTemplateText(name, settings, locale, formDesignerView, false, domainInstance)
	}
								
	private String widgetTemplateText(String name, Object settings,Locale locale, FormDesignerView formDesignerView, boolean readOnly, Object domainInstance = null) {
		domainInstance = domainInstanceForSubForm
		String language = locale.language == 'en' ? 'en' : "${locale.language}_${locale.country}"
		def styles = settings."${language}".styles
		String fontWeight = styles.fontStyles[0] == 1 ? 'bold' : 'normal'
		String fontStyle = styles.fontStyles[1] == 1 ? 'italic' : 'normal'
		String textDecoration = styles.fontStyles[2] == 1 ? 'underline' : 'none'
		String fontFamily = styles.fontFamily == 'default' ? FormBuilderConstants.EMPTY_STRING : "font-family: ${styles.fontFamily}; "
		String fontSize = styles.fontSize == 'default' ? FormBuilderConstants.EMPTY_STRING : "font-size: ${styles.fontSize}px; "  
		String valueColor = settings.styles.value.color == 'default' ? FormBuilderConstants.EMPTY_STRING : "color: #${settings.styles.value.color}; "
		String valueBackgroundColor = settings.styles.value.backgroundColor == 'default' ? FormBuilderConstants.EMPTY_STRING : "background-color: #${settings.styles.value.backgroundColor}; "
		String descriptionColor = settings.styles.description.color == 'default' ? FormBuilderConstants.EMPTY_STRING : "color: #${settings.styles.description.color}; "
		String descriptionBackgroundColor = settings.styles.description.backgroundColor == 'default' ? FormBuilderConstants.EMPTY_STRING : "background-color: #${settings.styles.description.backgroundColor}; "
		String textField
		Form subFormInstance
		def subFormFieldTypes = ConfigurationHolder.config.subFieldTypes
		SimpleDateFormat dateFormatter = new SimpleDateFormat(ConfigurationHolder.config.format.date)
		def serverURL = ConfigurationHolder.config.grails.serverURL
		if(settings.subForm){
			try{
				subFormInstance = Form.read(settings.subForm)
			}catch(Exception e){}
		}
		
		String stringValueScript
		def counterMap = [counter:4];
		if(formDesignerView){//In case of designer view we will just show the headers in table
			stringValueScript = """<div class="datatableDiv"><table class="datatable" cellpadding="0" cellspacing="0" style="margin:0;"><thead>
			<tr>"""
			if(subFormInstance){
				stringValueScript += getHeaderBar(subFormInstance, subFormFieldTypes, 4,counterMap)//Getting header bar here
			}else{
				stringValueScript += """<th style="width:20%;font-weight:bold;">Sub Form Field 1</th>
				  <th style="width:20%;font-weight:bold;">Sub Form Field 2</th>
				  <th style="width:20%;font-weight:bold;">Sub Form Field 3</th>
				  <th style="width:20%;font-weight:bold;">Sub Form Field 4</th>
				  <th style="width:20%;font-weight:bold;">Sub Form Field 5</th>"""
			}
			stringValueScript += """</tr></thead>
				<tr>"""
			for(int i=0;i<=counterMap.counter;i++){
				  stringValueScript += """<td>&nbsp;</td>"""
			}
			stringValueScript += """</tr>
			  </table></div>"""
		}else{//In case not designer view we will just show the headers + data in table
			if(subFormInstance){
				if(domainInstance){
					counterMap.counter = 3;
					stringValueScript = """<div class="datatableDiv" style="overflow-x:auto;"><table class="datatable" cellpadding="0" cellspacing="0" style="margin:0;overflow-x:auto;"><thead><tr>"""
					stringValueScript += getHeaderBar(subFormInstance, subFormFieldTypes, -1,counterMap)//Getting header bar here
					stringValueScript += """</tr></thead>"""
					def fieldsList = subFormInstance.fieldsList.findAll{(subFormFieldTypes.contains(it.type))}
					def subFormInstanceList = domainInstance."${name}"
					def totalMap = [:]
					for(int i=0; i<subFormInstanceList?.size();i++){//populating table body with sub form instances' values
						 def subDomainInstance = subFormInstanceList.get(i)
						if(subDomainInstance){
							if (!readOnly) {
								stringValueScript += """<tr><td>@subFormIDBeforeLink${subFormInstanceList.get(i).id}@subFormIDAfterLink<img src="${serverURL}/images/icons/page_white_edit.png" alt="Edit" />@subFormIDCloseLink</td>"""
							} else {
								stringValueScript += """<tr><td><img src="${serverURL}/images/icons/page_white_edit.png" alt="Edit" /></td>"""
							}
							for(int j=0;j<fieldsList.size();j++){
								def fieldName
								def fieldValue
								try{
									Field subField = fieldsList.get(j)
									fieldName = subField.name
									if( subDomainInstance?."${fieldName}" && settings.numericSubField && settings.numericSubField.contains(fieldName) ){
										totalMap."${fieldName}" = (totalMap."${fieldName}"?:0) + (subDomainInstance."${fieldName}"?:0)
									}
									fieldValue = subDomainInstance?."${fieldName}"
									if(fieldValue && fieldValue?.class?.name == "java.sql.Timestamp"){
										fieldValue = dateFormatter.format(fieldValue)
									}else if(subField?.type == 'AddressField'){
					 					String values=""
										def mapValue = grails.converters.JSON.parse((subDomainInstance?."${fieldName}").toString())
										if(mapValue){
											values+=mapValue."line1"?(mapValue."line1"+" ;"):""
											values+=mapValue."line2"?(mapValue."line2"+" ;"):""
											values+=mapValue."city"?(mapValue."city"+" ;"):""
											values+=mapValue."state"?(mapValue."state"+" ;"):""
											values+=mapValue."zip"?(mapValue."zip"+" ;"):""
											values+=mapValue."country"?(mapValue."country"+" ;"):""
										}
									fieldValue= values
									}else if(subField?.type == 'NameTypeField'){
					 					String values=""
										def subSettings = grails.converters.JSON.parse(subField.settings) 
										 boolean pre=subSettings?.showPrefix
										 boolean mid=subSettings?.showMiddleName
										def mapValue = grails.converters.JSON.parse((subDomainInstance?."${fieldName}").toString())
										if(mapValue){
											if(pre)
												values+=mapValue."pre"?(mapValue."pre"+" "):""
											values+=mapValue."fn"?(mapValue."fn"+" "):""
											if(mid)
												values+=mapValue."mn"?(mapValue."mn"+" "):""
											values+=mapValue."ln"?(mapValue."ln"):""
										}
									fieldValue= values
									}else if(subField?.type == 'SingleLineNumber'){
									def subSettings = grails.converters.JSON.parse(subField.settings)
										int decimalPlaces=2
										try{
											 decimalPlaces=(subSettings?.decimalPlaces && subSettings?.decimalPlaces?.toInteger()!=2)?subSettings?.decimalPlaces?.toInteger():2
										}catch (Exception e) {}
										def value=subDomainInstance?."${fieldName}"!=null?subDomainInstance?."${fieldName}":''
										if(decimalPlaces<2)
										try{
											def val=subDomainInstance?."${fieldName}"!=null?new BigDecimal(subDomainInstance?."${fieldName}"):''
											 value =(new BigDecimal(val, java.math.MathContext.DECIMAL64).setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP))
										}catch(Exception e){}
										fieldValue= value
									}
								}catch(Exception e){}
								fieldValue=fieldValue!=null?fieldValue:''
								stringValueScript += """<td>${fieldValue}</td>"""
							}
							stringValueScript += """</tr>"""
						}
					}
					if(totalMap.keySet().size()>0){
						stringValueScript += """<tr style="font-weight:bold;"><td>Total</td>"""
						   for(int k=0;k<fieldsList.size();k++){
							  def totalForThisField
							  def fieldName
							  try{
								  Field subField = fieldsList.get(k)
								  fieldName = subField.name
								  totalForThisField = totalMap."${fieldName}"
								  if(subField?.type == 'SingleLineNumber'){
									  def subSettings = grails.converters.JSON.parse(subField.settings)
										  int decimalPlaces=2
										  try{
											   decimalPlaces=(subSettings?.decimalPlaces && subSettings?.decimalPlaces?.toInteger()!=2)?subSettings?.decimalPlaces?.toInteger():2
										  }catch (Exception e) {}
										  def value=totalForThisField!=null?totalForThisField:''
										  if(decimalPlaces<2)
										  try{
											  def val=totalForThisField!=null?new BigDecimal(totalForThisField):''
											   value =(new BigDecimal(val, java.math.MathContext.DECIMAL64).setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP))
										  }catch(Exception e){}
										  totalForThisField= value
									  }
							  }catch(Exception e){}
							  stringValueScript += """<td>${totalForThisField?:"&nbsp;"}</td>"""
						  }
						stringValueScript += """</tr>"""
					}
					stringValueScript += """</table></div>"""
					if (!readOnly) {
						stringValueScript += """@NewButtonHere"""
					}
				}else{//if no domainInstance here means it's in CREATE MODE and don't show the table here.
					stringValueScript = ""
				}
			}else{
				stringValueScript = "Sub form not available"
			}
		}
	
	  if (!readOnly) {
		  textField = stringValueScript
	  } else {
		  textField = stringValueScript
	  }
	  return """<div><label for="${name}" style="font-weight: ${fontWeight}; font-style: ${fontStyle}; ${fontSize}"
		  ><span style="text-decoration: ${textDecoration};line-height:16px;">${settings."${language}".label.encodeAsHTML()}</span><em>${settings.required ? '*' : FormBuilderConstants.EMPTY_STRING}</em></label>
      ${textField}
	    <p class="formHint" style="width:100%;${descriptionColor}${descriptionBackgroundColor}">${settings."${language}".description.encodeAsHTML()}</p></div>"""
	}
								
	String getFieldConstraints(Object settings) {
		if (settings.restriction == 'no') {
			return FormBuilderConstants.EMPTY_STRING
		} else {
			return "${settings.restriction}:true"
		}
	}

	String getWidgetReadOnlyTemplateText(String name, Object settings, Locale locale, FormDesignerView formDesignerView, Object domainInstance) {														
		return widgetTemplateText(name, settings, locale, formDesignerView, true, domainInstance)
	}
	
	String getHeaderBar(Form subFormInstance,List subFormFieldTypes, int col, def counterMap){
		def headerTDs = ""
		def fieldsList = subFormInstance.fieldsList.findAll{(subFormFieldTypes.contains(it.type))}
		col = (col!=-1?col:fieldsList.size())
		int i
		headerTDs += """<th style="text-decoration:none;font-weight:bold;">Edit</th>"""
		for(i =0; i<col && i<fieldsList.size(); i++){
			def fieldName
			if( fieldsList.size() == i ){
				fieldName = "..."
			}else{
				try{
					Field subField = fieldsList.get(i)
					fieldName = subField.toString()
					 if(subField?.type == 'SingleLineNumber'){
						def subSettings = grails.converters.JSON.parse(subField.settings)
						boolean currencyType=(subSettings?.currencyType && subSettings?.currencyType!='')?true:false;
						String currency=currencyType?" (${ConfigurationHolder.config?.formBuilder.currencies[subSettings.currencyType].decodeHTML()})":''
						fieldName = subField.toString()+currency
						}
				}catch(Exception e){}
			}
			headerTDs += """<th style="font-weight:bold;">${fieldName}</th>"""
		}
		counterMap.counter=i
		return headerTDs
	}
	
}
